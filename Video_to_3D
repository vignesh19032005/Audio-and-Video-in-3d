import numpy as np
import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *
import cv2
import tkinter as tk
from tkinter import filedialog
import time
import sys

class VideoFrameVisualizer:
    def __init__(self, video_path, point_density=100):
        # Initialize video capture
        self.cap = cv2.VideoCapture(video_path)
        if not self.cap.isOpened():
            raise ValueError("Could not open video file")
            
        # Video properties
        self.video_path = video_path
        self.frame_count = int(self.cap.get(cv2.CAP_PROP_FRAME_COUNT))
        self.fps = self.cap.get(cv2.CAP_PROP_FPS)
        self.frame_time = 1/self.fps if self.fps > 0 else 1/30
        
        # Get video dimensions
        self.video_width = int(self.cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        self.video_height = int(self.cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        
        # Calculate grid size based on density
        self.grid_x = point_density
        self.grid_y = int(point_density * (self.video_height / self.video_width))
        
        # Initialize pygame
        pygame.init()
        self.window_width = 1024
        self.window_height = 768
        self.init_display()
        
        # Visualization parameters
        self.current_points = None
        self.current_colors = None
        self.rotation_angle = 45
        self.elevation_angle = 30
        self.zoom = -3.0
        self.pause = False
        
        print("Initialization complete")
        
    def init_display(self):
        """Initialize PyGame display with error checking"""
        try:
            pygame.display.set_mode((self.window_width, self.window_height), DOUBLEBUF | OPENGL)
            pygame.display.set_caption('3D Video Visualizer')
            
            # OpenGL setup
            glEnable(GL_DEPTH_TEST)
            glEnable(GL_BLEND)
            glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
            glClearColor(0.1, 0.1, 0.1, 1.0)
            
            print("Display initialized successfully")
        except Exception as e:
            print(f"Failed to initialize display: {e}")
            sys.exit(1)

    def process_frame(self, frame):
        """Convert video frame to 3D mesh points"""
        try:
            # Resize frame to our grid size
            frame_resized = cv2.resize(frame, (self.grid_x, self.grid_y))
            gray = cv2.cvtColor(frame_resized, cv2.COLOR_BGR2GRAY)
            
            # Create mesh grid
            x = np.linspace(-1, 1, self.grid_x)
            y = np.linspace(-1, 1, self.grid_y)
            X, Y = np.meshgrid(x, y)
            
            # Use grayscale values for height (Z coordinate)
            Z = gray.astype(np.float32) / 255.0 * 0.5
            
            # Create points array
            points = np.zeros((self.grid_y, self.grid_x, 3))
            points[:,:,0] = X
            points[:,:,1] = Y
            points[:,:,2] = Z
            
            # Create colors array from original frame
            colors = frame_resized / 255.0
            
            return points, colors
            
        except Exception as e:
            print(f"Frame processing error: {e}")
            return None, None

    def setup_3d(self):
        """Setup 3D projection"""
        glMatrixMode(GL_PROJECTION)
        glLoadIdentity()
        gluPerspective(45, (self.window_width/self.window_height), 0.1, 50.0)
        glMatrixMode(GL_MODELVIEW)

    def draw_frame_3d(self):
        """Draw current frame as 3D surface"""
        if self.current_points is None:
            return
            
        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)
        glLoadIdentity()
        
        # Position and rotate camera
        glTranslatef(0.0, 0.0, self.zoom)
        glRotatef(self.elevation_angle, 1, 0, 0)
        glRotatef(self.rotation_angle, 0, 1, 0)
        
        # Draw triangles
        for y in range(self.grid_y - 1):
            glBegin(GL_TRIANGLE_STRIP)
            for x in range(self.grid_x):
                # Current point
                color = self.current_colors[y,x]
                glColor3f(color[2], color[1], color[0])  # BGR to RGB
                point = self.current_points[y,x]
                glVertex3f(point[0], point[1], point[2])
                
                # Next row point
                color = self.current_colors[y+1,x]
                glColor3f(color[2], color[1], color[0])  # BGR to RGB
                point = self.current_points[y+1,x]
                glVertex3f(point[0], point[1], point[2])
            glEnd()

    def run(self):
        """Main rendering loop"""
        self.setup_3d()
        clock = pygame.time.Clock()
        last_frame_time = time.time()
        
        try:
            while True:
                # Event handling
                for event in pygame.event.get():
                    if event.type == pygame.QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                        return
                    if event.type == KEYDOWN:
                        if event.key == K_SPACE:
                            self.pause = not self.pause
                        elif event.key == K_LEFT:
                            self.rotation_angle += 5
                        elif event.key == K_RIGHT:
                            self.rotation_angle -= 5
                        elif event.key == K_UP:
                            self.elevation_angle += 5
                        elif event.key == K_DOWN:
                            self.elevation_angle -= 5
                        elif event.key == K_w:
                            self.zoom += 0.1
                        elif event.key == K_s:
                            self.zoom -= 0.1
                
                # Process new frame
                current_time = time.time()
                if not self.pause and (current_time - last_frame_time) >= self.frame_time:
                    ret, frame = self.cap.read()
                    if not ret:
                        self.cap.set(cv2.CAP_PROP_POS_FRAMES, 0)  # Loop video
                        continue
                    
                    self.current_points, self.current_colors = self.process_frame(frame)
                    last_frame_time = current_time
                
                # Render frame
                self.draw_frame_3d()
                pygame.display.flip()
                clock.tick(60)
                
        except Exception as e:
            print(f"Runtime error: {e}")
        finally:
            self.cap.release()
            pygame.quit()

def main():
    root = tk.Tk()
    root.withdraw()
    video_path = filedialog.askopenfilename(
        title="Select Video File",
        filetypes=[("Video files", "*.mp4 *.avi *.mov")]
    )
    
    if not video_path:
        print("No file selected")
        return
        
    try:
        visualizer = VideoFrameVisualizer(video_path)
        visualizer.run()
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
